#!/usr/bin/env ruby

libdir = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(libdir) unless $LOAD_PATH.include?(libdir)

require 'json'
require 'puma'
require 'sinatra'
require 'grese/webhook_server'

server = Grese::WebhookServer.new({
  url: ENV['ZENDESK_URL'],
  user: ENV['ZENDESK_USER'],
  token: ENV['ZENDESK_TOKEN'],
  ssApiKey: ENV['SS_API_KEY'],
  ssApiSecret: ENV['SS_API_SECRET'],
  ssApiHost: ENV['SS_API_HOSTNAME'],
  ssApiPath: ENV['SS_API_PATH'],
  ssS3Mountpoint: ENV['SS_S3_MOUNTPOINT'],
  ssS3Path: ENV['SS_S3_PATH'],
  workingDir: ENV['WORKING_DIR']

}, development?)

def authenticate!(token)
  if token != ENV['AUTH_TOKEN'] # rubocop:disable Style/GuardClause
    status 401
    halt "Access denied\n"
  end
end

def invalid_request
  status 400
end

before '/zendesk/:token' do
  authenticate!(params['token'])
end
before '/:token' do
  authenticate!(params['token'])
end

post '/:token' do
  params = JSON.parse request.body.read
  if (remote_url = params['url'])
    server.check_logs(remote_url).to_json
  else
    # Invalid request no remote_url param
    invalid_request
  end
end


get '/zendesk/:token' do
  if (info = params['info'])
    begin
      # legacy code for processing ticket attachments
      ticket_info = JSON.parse(info)
      attachments = ticket_info['attachments'].split('|')
      attachments.each do |attachment|
        filename = attachment.split('=').last
        child_pid = Process.fork do
          settings.running_server = nil

	results = server.check_logs(attachment)
        server.update_zendesk(ticket_info['ticket_id'].to_i, filename, results)
        puts results.to_json
	Process.exit
	end	        
	Process.detach child_pid
        status 204
      end
    rescue JSON::ParserError => e

      # if we can't parse json, assume it's new functionality for sendsafely 
      
      # parse out ticket id and content from Zendesk post
      ticket_id = info.split(',',2)[0]
      ticket_content = info.split(',',2)[1]

      # parse out sendsafely links from content

      sendsafely_links = ticket_content.scan(/(https:\/\/[a-zA-Z\.]+\/receive\/\?[A-Za-z0-9&=\-]+packageCode=[A-Za-z0-9\-_]+#keyCode=[A-Za-z0-9\-_]+)/).flatten

      # for each sendsafely link
      sendsafely_links.each do |link|
        child_pid = Process.fork do
          settings.running_server = nil
 
          results = server.check_link(link,ticket_id)
          
          # update zendesk ticket with results of report
          results.each do |result|
            server.update_zendesk(ticket_id.to_i, result['filename'], result['report'])
          end
          
          puts results.to_json
	Process.exit
	end	
        Process.detach child_pid
        status 204
        
      end
      
#      status 204      

    end
    else
      # Invalid request no info param
      invalid_request
    end
end

get '/' do
  'Hello, World!'
end
